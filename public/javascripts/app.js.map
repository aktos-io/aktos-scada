{"version":3,"sources":["app/app.ls","app/init.ls","app/lib/testlibrary.ls","app/weblib.ls"],"names":[],"mappingsfile":"public/javascripts/app.js","sourcesContent":["// Generated by LiveScript 1.3.1\nvar ref$, mkRealtimeInput, mkRadiobox, weblibTest, stateOf, radioboxHandler, radioboxListenerHandler, connectEnterToClick, flatten, initial, drop, join, concat, tail, head, map, zip, split, union, url, arr, addr_port, socketioPath, socket, ActorBase, ActorManager, Actor, ProxyActor, SwitchActor, getRactiveVariable, setRactiveVariable, app, setSwitchButtons, setPushButtons, setStatusLeds, setAnalogDisplays;\nref$ = require('./weblib'), mkRealtimeInput = ref$.mkRealtimeInput, mkRadiobox = ref$.mkRadiobox, weblibTest = ref$.test, stateOf = ref$.stateOf, radioboxHandler = ref$.radioboxHandler, radioboxListenerHandler = ref$.radioboxListenerHandler, connectEnterToClick = ref$.connectEnterToClick;\nflatten = prelude.flatten;\ninitial = prelude.initial;\ndrop = prelude.drop;\njoin = prelude.join;\nconcat = prelude.concat;\ntail = prelude.tail;\nhead = prelude.head;\nmap = prelude.map;\nzip = prelude.zip;\nsplit = prelude.split;\nunion = prelude.union;\n/* initialize socket.io connections */\nurl = window.location.href;\narr = url.split(\"/\");\naddr_port = arr[0] + \"//\" + arr[2];\nsocketioPath = [''].concat(initial(drop(3, arr)), ['socket.io']);\nsocketioPath = join('/', socketioPath);\nsocket = io.connect(addr_port, {\n  path: socketioPath\n});\nActorBase = (function(){\n  ActorBase.displayName = 'ActorBase';\n  var prototype = ActorBase.prototype, constructor = ActorBase;\n  function ActorBase(){\n    var this$ = this instanceof ctor$ ? this : new ctor$;\n    this$.actorId = uuid4();\n    return this$;\n  } function ctor$(){} ctor$.prototype = prototype;\n  prototype.receive = function(msg){};\n  prototype.recv = function(msg){\n    var e;\n    this.receive(msg);\n    try {\n      return this['handle_' + msg.cls](msg);\n    } catch (e$) {\n      return e = e$;\n    }\n  };\n  return ActorBase;\n}());\nActorManager = (function(){\n  ActorManager.displayName = 'ActorManager';\n  var instance, SingletonClass, prototype = ActorManager.prototype, constructor = ActorManager;\n  instance = null;\n  function ActorManager(){\n    var this$ = this instanceof ctor$ ? this : new ctor$;\n    instance == null && (instance = SingletonClass());\n    return instance;\n    return this$;\n  } function ctor$(){} ctor$.prototype = prototype;\n  SingletonClass = (function(superclass){\n    var prototype = extend$((import$(SingletonClass, superclass).displayName = 'SingletonClass', SingletonClass), superclass).prototype, constructor = SingletonClass;\n    function SingletonClass(){\n      var this$ = this instanceof ctor$ ? this : new ctor$;\n      SingletonClass.superclass.apply(this$, arguments);\n      this$.actorList = [];\n      return this$;\n    } function ctor$(){} ctor$.prototype = prototype;\n    prototype.register = function(actor){\n      return this.actorList = this.actorList.concat([actor]);\n    };\n    prototype.inboxPut = function(msg){\n      var i$, ref$, len$, actor, results$ = [];\n      msg.sender = msg.sender.concat([this.actorId]);\n      for (i$ = 0, len$ = (ref$ = this.actorList).length; i$ < len$; ++i$) {\n        actor = ref$[i$];\n        if (!in$(actor.actorId, msg.sender)) {\n          results$.push(actor.recv(msg));\n        }\n      }\n      return results$;\n    };\n    return SingletonClass;\n  }(ActorBase));\n  return ActorManager;\n}());\nActor = (function(superclass){\n  var prototype = extend$((import$(Actor, superclass).displayName = 'Actor', Actor), superclass).prototype, constructor = Actor;\n  function Actor(name){\n    var this$ = this instanceof ctor$ ? this : new ctor$;\n    Actor.superclass.apply(this$, arguments);\n    this$.mgr = ActorManager();\n    this$.mgr.register(this$);\n    this$.name = name;\n    return this$;\n  } function ctor$(){} ctor$.prototype = prototype;\n  prototype.send = function(msg){\n    msg = this.fillMsg(msg);\n    msg.sender = msg.sender.concat([this.actorId]);\n    return this.mgr.inboxPut(msg);\n  };\n  prototype.copyMsg = function(msg){\n    return JSON.parse(JSON.stringify(msg));\n  };\n  prototype.fillMsg = function(msg){\n    var cls;\n    cls = Object.keys(msg)[0];\n    msg = this.copyMsg(msg[cls]);\n    msg.cls = cls;\n    msg.sender == null && (msg.sender = []);\n    msg.timestamp == null && (msg.timestamp = Date.now() / 1000 || 0);\n    msg.msg_id = uuid4();\n    return msg;\n  };\n  return Actor;\n}(ActorBase));\nProxyActor = (function(){\n  ProxyActor.displayName = 'ProxyActor';\n  var instance, SingletonClass, prototype = ProxyActor.prototype, constructor = ProxyActor;\n  instance = null;\n  function ProxyActor(){\n    var this$ = this instanceof ctor$ ? this : new ctor$;\n    instance == null && (instance = SingletonClass());\n    return instance;\n    return this$;\n  } function ctor$(){} ctor$.prototype = prototype;\n  SingletonClass = (function(superclass){\n    var prototype = extend$((import$(SingletonClass, superclass).displayName = 'SingletonClass', SingletonClass), superclass).prototype, constructor = SingletonClass;\n    function SingletonClass(){\n      var this$ = this instanceof ctor$ ? this : new ctor$;\n      SingletonClass.superclass.apply(this$, arguments);\n      this$.socket = socket;\n      this$.socket.on('aktos-message', function(msg){\n        var e;\n        try {\n          return this$.networkRx(msg);\n        } catch (e$) {\n          e = e$;\n          return console.log(\"Problem with receiving message: \", e);\n        }\n      });\n      this$.connected = false;\n      this$.socket.on(\"connect\", function(){\n        this$.connected = true;\n      });\n      this$.socket.on(\"disconnect\", function(){\n        this$.connected = false;\n      });\n      return this$;\n    } function ctor$(){} ctor$.prototype = prototype;\n    prototype.networkRx = function(msg){\n      return this.send(msg);\n    };\n    prototype.fillMsg = function(msg){\n      return msg;\n    };\n    prototype.receive = function(msg){\n      msg.sender = msg.sender.concat([this.actorId]);\n      return this.socket.emit('aktos-message', msg);\n    };\n    return SingletonClass;\n  }(Actor));\n  return ProxyActor;\n}());\n/*\n\n# aktos widget library\n\n## basic types:\n\ntoggle-switch: toggles on every tap or click\npush-button : toggles while clicking or tapping\nstatus-led : readonly of toggle-switch or push-button\n\n*/\nSwitchActor = (function(superclass){\n  var prototype = extend$((import$(SwitchActor, superclass).displayName = 'SwitchActor', SwitchActor), superclass).prototype, constructor = SwitchActor;\n  function SwitchActor(pinName){\n    var this$ = this instanceof ctor$ ? this : new ctor$;\n    SwitchActor.superclass.apply(this$, arguments);\n    this$.listenerFunctions = [];\n    this$.pinName = String(pinName);\n    this$.send({\n      UpdateIoMessage: {}\n    });\n    return this$;\n  } function ctor$(){} ctor$.prototype = prototype;\n  prototype.addListener = function(func){\n    return this.listenerFunctions = this.listenerFunctions.concat([func]);\n  };\n  prototype.handle_IoMessage = function(msg){\n    var i$, ref$, len$, func, results$ = [];\n    if (msg.pin_name === this.pinName) {\n      for (i$ = 0, len$ = (ref$ = this.listenerFunctions).length; i$ < len$; ++i$) {\n        func = ref$[i$];\n        results$.push(func(msg));\n      }\n      return results$;\n    }\n  };\n  prototype.sendEvent = function(val){\n    return this.send({\n      IoMessage: {\n        pin_name: this.pinName,\n        val: val\n      }\n    });\n  };\n  return SwitchActor;\n}(Actor));\ngetRactiveVariable = function(jqElem, ractiveVariable){\n  var ractiveNode, value;\n  ractiveNode = Ractive.getNodeInfo(jqElem.get(0));\n  value = app.get(ractiveNode['keypath'])[ractiveVariable];\n  return value;\n};\nsetRactiveVariable = function(jqElem, ractiveVariable, value){\n  var ractiveNode;\n  ractiveNode = Ractive.getNodeInfo(jqElem.get(0));\n  return app.set(ractiveNode['keypath'] + '.' + ractiveVariable, value);\n};\nProxyActor();\nRactive.DEBUG = /unminified/.test(function(){\n  /*unminified*/\n});\napp = new Ractive({\n  template: '#app',\n  el: 'container'\n});\nsetSwitchButtons = function(){\n  $('.toggle-switch').each(function(){\n    var elem, elemDom, pinId, actor, s;\n    elem = $(this);\n    elemDom = elem[0];\n    pinId = elem.prop('value');\n    actor = SwitchActor(pinId);\n    elem.change(function(){\n      return actor.sendEvent(this.checked);\n    });\n    actor.addListener(function(msg){\n      return elem.prop('checked', msg.val);\n    });\n    s = new ToggleSwitch(elemDom, 'on', 'off');\n    actor.addListener(function(msg){\n      var tmp;\n      tmp = s.fCallback;\n      s.fCallback = null;\n      if (msg.val) {\n        s.on();\n      } else {\n        s.off();\n      }\n      s.fCallback = tmp;\n      return tmp = null;\n    });\n    s.addListener(function(state){\n      actor.sendEvent(state);\n    });\n  });\n};\nsetPushButtons = function(){\n  return $('.push-button').each(function(){\n    var jqElem, pinName, actor;\n    jqElem = $(this);\n    pinName = getRactiveVariable(jqElem, 'pin_name');\n    actor = SwitchActor(pinName);\n    jqElem.on('mousedown touchstart', function(){\n      jqElem.addClass('button-active-state');\n      actor.sendEvent(true);\n      return jqElem.on('mouseleave', function(){\n        jqElem.removeClass('button-active-state');\n        return actor.sendEvent(false);\n      });\n    });\n    jqElem.on('mouseup touchend touchcancel touchmove', function(){\n      jqElem.removeClass('button-active-state');\n      actor.sendEvent(false);\n      return jqElem.off('mouseleave');\n    });\n    return actor.addListener(function(msg){\n      if (msg.val) {\n        return jqElem.addClass('button-active-state');\n      } else {\n        return jqElem.removeClass('button-active-state');\n      }\n    });\n  });\n};\nsetStatusLeds = function(){\n  return $('.status-led').each(function(){\n    var jqElem, pinName, actor;\n    jqElem = $(this);\n    pinName = getRactiveVariable(jqElem, 'pin_name');\n    actor = SwitchActor(pinName);\n    return actor.addListener(function(msg){\n      return setRactiveVariable(jqElem, 'val', msg.val);\n    });\n  });\n};\nsetAnalogDisplays = function(){\n  return $('.analog-display').each(function(){\n    var jqElem, channelName, actor;\n    jqElem = $(this);\n    channelName = getRactiveVariable(jqElem, 'pin_name');\n    actor = SwitchActor(channelName);\n    return actor.addListener(function(msg){\n      return setRactiveVariable(jqElem, 'val', msg.val);\n    });\n  });\n};\napp.on('complete', function(){\n  setSwitchButtons();\n  setPushButtons();\n  setStatusLeds();\n  setAnalogDisplays();\n});\nsocket.on(\"connect\", function(){\n  app.set(\"connected\", true);\n});\nsocket.on('disconnect', function(){\n  console.log('disconnected...');\n  app.set('connected', false);\n});\nfunction extend$(sub, sup){\n  function fun(){} fun.prototype = (sub.superclass = sup).prototype;\n  (sub.prototype = new fun).constructor = sub;\n  if (typeof sup.extended == 'function') sup.extended(sub);\n  return sub;\n}\nfunction import$(obj, src){\n  var own = {}.hasOwnProperty;\n  for (var key in src) if (own.call(src, key)) obj[key] = src[key];\n  return obj;\n}\nfunction in$(x, xs){\n  var i = -1, l = xs.length >>> 0;\n  while (++i < l) if (x === xs[i]) return true;\n  return false;\n}","// Generated by LiveScript 1.3.1\nrequire('app');","// Generated by LiveScript 1.3.1\nvar test;\ntest = function(){\n  console.log(\"test lib is working!\");\n};\nmodule.exports = {\n  test: test\n};","// Generated by LiveScript 1.3.1\n/*\nrequire! {\n  'prelude-ls': {\n    flatten\n    initial\n    drop\n    join\n    concat\n    tail\n    head\n    map\n    zip\n    split\n    }\n}\n*/\n/*\nflatten = prelude.flatten\ninitial = prelude.initial\ndrop = prelude.drop\njoin = prelude.join\nconcat = prelude.concat\ntail = prelude.tail\nhead = prelude.head\nmap = prelude.map\nzip = prelude.zip\nsplit = prelude.split\n*/\nvar test, mkRealtimeInput, rotate, stateOf, mkRadiobox, radioboxHandler, radioboxListenerHandler, connectEnterToClick;\ntest = function(){\n  return console.log('weblib library is working!');\n};\nmkRealtimeInput = function(node, timeout, handler){\n  $(node).each(function(){\n    var elem, dataKey, valFunc, typeAttr;\n    elem = $(this);\n    dataKey = 'mk-realtime-input.old-val';\n    valFunc = function(){\n      return elem.val();\n    };\n    typeAttr = elem.attr('type');\n    if (typeAttr != null ? typeAttr : void 8) {\n      if (elem.attr('type') === 'checkbox') {\n        valFunc = function(){\n          return elem.is(':checked');\n        };\n      }\n    }\n    elem.data(dataKey, valFunc());\n    elem.bind(\"propertychange change click keyup input paste\", function(event){\n      var handlerWithParameter;\n      if (elem.data(dataKey) !== valFunc()) {\n        elem.data(dataKey, valFunc());\n        handlerWithParameter = handler(elem);\n        clearTimeout(elem.data('timeout'));\n        elem.data('timeout', setTimeout(handlerWithParameter, timeout));\n      }\n    });\n  });\n};\nrotate = function(array){\n  return tail(array).concat([head(array)]);\n};\nstateOf = function(elem){\n  return elem.is(':checked');\n};\nmkRadiobox = function(nodeId, handler, listenerHandler, socket){\n  var buttons, buttons1f, buttons2f, i$, to$, i, len$, button, results$ = [];\n  buttons = [];\n  $(nodeId).children().each(function(){\n    var elem;\n    elem = $(this);\n    if (elem.attr('type') === 'checkbox') {\n      buttons.push(elem);\n    }\n  });\n  buttons1f = rotate(buttons);\n  buttons2f = rotate(buttons1f);\n  for (i$ = 0, to$ = buttons.length - 1; i$ <= to$; ++i$) {\n    i = i$;\n    buttons1f[i].data({\n      'next-button': buttons2f[i],\n      'previous-button': buttons[i],\n      'version': 0,\n      'old-value': stateOf(buttons1f[i]),\n      'id': i,\n      'group-id': nodeId,\n      'edge': false\n    });\n  }\n  for (i$ = 0, len$ = buttons.length; i$ < len$; ++i$) {\n    button = buttons[i$];\n    listenerHandler(button, socket);\n    results$.push(button.bind(\"propertychange click keyup chain\", fn$));\n  }\n  return results$;\n  function fn$(event){\n    var currentButton, nextButton, previousButton, debugMessage, currentState;\n    currentButton = $(event.target);\n    nextButton = currentButton.data()['next-button'];\n    previousButton = currentButton.data()['previous-button'];\n    debugMessage = '';\n    debugMessage += 'rb-event-handler: ';\n    debugMessage += currentButton.attr('value') + ', ';\n    currentState = stateOf(currentButton);\n    if (previousButton.data()['version'] > currentButton.data()['version']) {\n      currentButton.data()['version'] = previousButton.data()['version'];\n    }\n    debugMessage += 'state ';\n    if (currentButton.data()['old-value'] !== currentState) {\n      debugMessage += 'changed: ';\n      debugMessage += currentButton.data()['old-value'];\n      debugMessage += ' -> ';\n      currentButton.data()['version'] += 1;\n      handler(currentButton, event, socket);\n      currentButton.data()['old-value'] = currentState;\n      currentButton.data()['edge'] = true;\n    } else {\n      debugMessage += ' not changed: ';\n      currentButton.data()['edge'] = false;\n    }\n    debugMessage += currentState;\n    if (nextButton.data()['version'] < currentButton.data()['version']) {\n      nextButton.trigger('chain');\n    } else {}\n    console.log(debugMessage);\n  }\n};\nradioboxHandler = function(elem, event, socket){\n  var currentButton, strJoin, radioboxMessage, radioboxGid, debugMessage;\n  currentButton = elem;\n  strJoin = join('');\n  radioboxMessage = strJoin([elem.attr('value'), ' is changed to ', stateOf(elem).toString()]);\n  radioboxGid = elem.data()['group-id'];\n  debugMessage = '';\n  debugMessage += 'rb-handler: ';\n  debugMessage += radioboxGid + ': ';\n  debugMessage += 'event.type: ' + event.type;\n  if (stateOf(currentButton) !== currentButton.data()['old-value'] && event.type !== 'chain') {\n    socket.emit('tweet', {\n      user: radioboxGid,\n      text: radioboxMessage\n    });\n  }\n  if (false) {\n    socket.emit('tweet', {\n      user: 'debug',\n      text: strJoin([elem.attr('value'), ': ', currentButton.data()['old-value'], ' -> ', stateOf(currentButton).toString()])\n    });\n  }\n};\nradioboxListenerHandler = function(elem, socket){\n  var radioboxGid, domId, debugMessage1;\n  radioboxGid = elem.data()['group-id'];\n  domId = elem.attr('value');\n  debugMessage1 = '';\n  debugMessage1 += 'radiobox: ';\n  debugMessage1 += 'handler added for ';\n  debugMessage1 += radioboxGid + '.' + domId;\n  socket.on('tweet', function(tweet){\n    var debugMessage, changeLog, checkState, currentButton, b;\n    debugMessage = '';\n    debugMessage += 'rb-receiver: ';\n    debugMessage += radioboxGid + '.' + domId;\n    if (tweet.user === radioboxGid) {\n      changeLog = split(' is changed to ', tweet.text);\n      debugMessage += ', ';\n      debugMessage += join('->', changeLog);\n      if (changeLog[0] === domId) {\n        checkState = changeLog[1] === 'true';\n        elem.prop('checked', checkState);\n        currentButton = elem;\n        if (stateOf(currentButton) === true) {\n          debugMessage += \" unchecking other buttons, \";\n          b = currentButton.data()['next-button'];\n          while (b.data()['id'] !== currentButton.data()['id']) {\n            b.prop('checked', false);\n            b.trigger('chain');\n            b = b.data()['next-button'];\n          }\n          return debugMessage += \" unchecking other buttons DONE.\";\n        }\n      }\n    } else {\n      return debugMessage += ' this msg is NOT for me';\n    }\n  });\n};\nconnectEnterToClick = function(src, target){\n  $('document').ready(function(){\n    $(src).keypress(function(e){\n      if (e.keyCode === 13) {\n        $(target).click();\n      }\n    });\n  });\n};\nmodule.exports = {\n  test: test,\n  mkRealtimeInput: mkRealtimeInput,\n  mkRadiobox: mkRadiobox,\n  rotate: rotate,\n  stateOf: stateOf,\n  radioboxHandler: radioboxHandler,\n  radioboxListenerHandler: radioboxListenerHandler,\n  connectEnterToClick: connectEnterToClick\n};"]}