{"version":3,"sources":["app/app.ls","app/init.ls","app/prelude/Func.ls","app/prelude/List.ls","app/prelude/Num.ls","app/prelude/Obj.ls","app/prelude/Str.ls","app/prelude/index.ls"],"names":[],"mappingshcqhxhLA;AAAA","file":"public/javascripts/app.js","sourcesContent":["var ref$, flatten, initial, drop, join, concat, tail, head, map, zip, split, union, url, arr, addr_port, socketioPath, socket, envelp, getMsgBody, ActorBase, ActorManager, Actor, ProxyActor, SwitchActor, getRactiveVariable, setRactiveVariable, app, setSwitchActors, setSwitchButtons, setPushButtons, setStatusLeds, setAnalogDisplays, makeJqMobileConnections, makeToggleSwitchVisualisation;\nref$ = require('./prelude'), flatten = ref$.flatten, initial = ref$.initial, drop = ref$.drop, join = ref$.join, concat = ref$.concat, tail = ref$.tail, head = ref$.head, map = ref$.map, zip = ref$.zip, split = ref$.split, union = ref$.union;\n/* initialize socket.io connections */\nurl = window.location.href;\narr = url.split(\"/\");\naddr_port = arr[0] + \"//\" + arr[2];\nsocketioPath = [''].concat(initial(drop(3, arr)), ['socket.io']);\nsocketioPath = join('/', socketioPath);\nsocket = io.connect(addr_port, {\n  path: socketioPath\n});\nenvelp = function(msg, msgId){\n  var msgRaw;\n  msgRaw = {\n    sender: [],\n    timestamp: Date.now() / 1000,\n    msg_id: msgId,\n    payload: msg\n  };\n  return msgRaw;\n};\ngetMsgBody = function(msg){\n  var subject, subj;\n  subject = (function(){\n    var results$ = [];\n    for (subj in msg.payload) {\n      results$.push(subj);\n    }\n    return results$;\n  }())[0];\n  return msg.payload[subject];\n};\nActorBase = (function(){\n  ActorBase.displayName = 'ActorBase';\n  var prototype = ActorBase.prototype, constructor = ActorBase;\n  function ActorBase(){\n    var this$ = this instanceof ctor$ ? this : new ctor$;\n    this$.actorId = uuid4();\n    return this$;\n  } function ctor$(){} ctor$.prototype = prototype;\n  prototype.receive = function(msg){};\n  prototype.recv = function(msg){\n    var subjects, res$, subj, i$, len$, subject, e, results$ = [];\n    this.receive(msg);\n    try {\n      res$ = [];\n      for (subj in msg.payload) {\n        res$.push(subj);\n      }\n      subjects = res$;\n      for (i$ = 0, len$ = subjects.length; i$ < len$; ++i$) {\n        subject = subjects[i$];\n        results$.push(this['handle_' + subject](msg));\n      }\n      return results$;\n    } catch (e$) {\n      return e = e$;\n    }\n  };\n  return ActorBase;\n}());\nActorManager = (function(){\n  ActorManager.displayName = 'ActorManager';\n  var instance, SingletonClass, prototype = ActorManager.prototype, constructor = ActorManager;\n  instance = null;\n  function ActorManager(){\n    var this$ = this instanceof ctor$ ? this : new ctor$;\n    instance == null && (instance = SingletonClass());\n    return instance;\n    return this$;\n  } function ctor$(){} ctor$.prototype = prototype;\n  SingletonClass = (function(superclass){\n    var prototype = extend$((import$(SingletonClass, superclass).displayName = 'SingletonClass', SingletonClass), superclass).prototype, constructor = SingletonClass;\n    function SingletonClass(){\n      var this$ = this instanceof ctor$ ? this : new ctor$;\n      SingletonClass.superclass.apply(this$, arguments);\n      this$.actorList = [];\n      return this$;\n    } function ctor$(){} ctor$.prototype = prototype;\n    prototype.register = function(actor){\n      return this.actorList = this.actorList.concat([actor]);\n    };\n    prototype.inboxPut = function(msg){\n      var i$, ref$, len$, actor, results$ = [];\n      msg.sender = msg.sender.concat([this.actorId]);\n      for (i$ = 0, len$ = (ref$ = this.actorList).length; i$ < len$; ++i$) {\n        actor = ref$[i$];\n        if (!in$(actor.actorId, msg.sender)) {\n          results$.push(actor.recv(msg));\n        }\n      }\n      return results$;\n    };\n    return SingletonClass;\n  }(ActorBase));\n  return ActorManager;\n}());\nActor = (function(superclass){\n  var prototype = extend$((import$(Actor, superclass).displayName = 'Actor', Actor), superclass).prototype, constructor = Actor;\n  function Actor(name){\n    var this$ = this instanceof ctor$ ? this : new ctor$;\n    Actor.superclass.apply(this$, arguments);\n    this$.mgr = ActorManager();\n    this$.mgr.register(this$);\n    this$.actorName = name;\n    this$.msgSerialNumber = 0;\n    return this$;\n  } function ctor$(){} ctor$.prototype = prototype;\n  prototype.send = function(msg){\n    msg = envelp(msg, this.getMsgId());\n    return this.send_raw(msg);\n  };\n  prototype.send_raw = function(msg_raw){\n    msg_raw.sender = msg_raw.sender.concat([this.actorId]);\n    return this.mgr.inboxPut(msg_raw);\n  };\n  prototype.getMsgId = function(){\n    var msgId;\n    msgId = this.actorId + '.' + String(this.msgSerialNumber);\n    this.msgSerialNumber += 1;\n    return msgId;\n  };\n  return Actor;\n}(ActorBase));\nProxyActor = (function(){\n  ProxyActor.displayName = 'ProxyActor';\n  var instance, SingletonClass, prototype = ProxyActor.prototype, constructor = ProxyActor;\n  instance = null;\n  function ProxyActor(){\n    var this$ = this instanceof ctor$ ? this : new ctor$;\n    instance == null && (instance = SingletonClass());\n    return instance;\n    return this$;\n  } function ctor$(){} ctor$.prototype = prototype;\n  SingletonClass = (function(superclass){\n    var prototype = extend$((import$(SingletonClass, superclass).displayName = 'SingletonClass', SingletonClass), superclass).prototype, constructor = SingletonClass;\n    function SingletonClass(){\n      var this$ = this instanceof ctor$ ? this : new ctor$;\n      SingletonClass.superclass.apply(this$, arguments);\n      this$.socket = socket;\n      this$.socket.on('aktos-message', function(msg){\n        var e;\n        try {\n          return this$.networkRx(msg);\n        } catch (e$) {\n          e = e$;\n          return console.log(\"Problem with receiving message: \", e);\n        }\n      });\n      this$.socket.on(\"connect\", function(){\n        this$.networkTx(envelp({\n          UpdateIoMessage: {}\n        }, this$.getMsgId()));\n        this$.send({\n          Connected: {}\n        });\n      });\n      this$.socket.on(\"disconnect\", function(){\n        this$.send({\n          Disconnected: {}\n        });\n      });\n      return this$;\n    } function ctor$(){} ctor$.prototype = prototype;\n    prototype.networkRx = function(msg){\n      console.log(\"proxy actor got network message: \", msg);\n      return this.send_raw(msg);\n    };\n    prototype.receive = function(msg){\n      return this.networkTx(msg);\n    };\n    prototype.networkTx = function(msg){\n      msg.sender = msg.sender.concat([this.actorId]);\n      return this.socket.emit('aktos-message', msg);\n    };\n    return SingletonClass;\n  }(Actor));\n  return ProxyActor;\n}());\n/*\n\n# aktos widget library\n\n## basic types:\n\ntoggle-switch: toggles on every tap or click\npush-button : toggles while clicking or tapping\nstatus-led : readonly of toggle-switch or push-button\n\n*/\nSwitchActor = (function(superclass){\n  var prototype = extend$((import$(SwitchActor, superclass).displayName = 'SwitchActor', SwitchActor), superclass).prototype, constructor = SwitchActor;\n  function SwitchActor(pinName){\n    var this$ = this instanceof ctor$ ? this : new ctor$;\n    SwitchActor.superclass.apply(this$, arguments);\n    this$.callbackFunctions = [];\n    this$.pinName = String(pinName);\n    this$.actorName = this$.pinName;\n    return this$;\n  } function ctor$(){} ctor$.prototype = prototype;\n  prototype.addCallback = function(func){\n    return this.callbackFunctions = this.callbackFunctions.concat([func]);\n  };\n  prototype.handle_IoMessage = function(msg){\n    var msgBody;\n    msgBody = getMsgBody(msg);\n    if (msgBody.pin_name === this.pinName) {\n      return this.fireCallbacks(msgBody);\n    }\n  };\n  prototype.fireCallbacks = function(msg){\n    var i$, ref$, len$, func, results$ = [];\n    for (i$ = 0, len$ = (ref$ = this.callbackFunctions).length; i$ < len$; ++i$) {\n      func = ref$[i$];\n      results$.push(func(msg));\n    }\n    return results$;\n  };\n  prototype.guiEvent = function(val){\n    this.fireCallbacks({\n      pin_name: this.pinName,\n      val: val\n    });\n    return this.send({\n      IoMessage: {\n        pin_name: this.pinName,\n        val: val\n      }\n    });\n  };\n  return SwitchActor;\n}(Actor));\ngetRactiveVariable = function(jqueryElem, ractiveVariable){\n  var ractiveNode, value;\n  ractiveNode = Ractive.getNodeInfo(jqueryElem.get(0));\n  value = app.get(ractiveNode['keypath'])[ractiveVariable];\n  return value;\n};\nsetRactiveVariable = function(jqueryElem, ractiveVariable, value){\n  var ractiveNode;\n  ractiveNode = Ractive.getNodeInfo(jqueryElem.get(0));\n  return app.set(ractiveNode['keypath'] + '.' + ractiveVariable, value);\n};\nProxyActor();\nRactive.DEBUG = /unminified/.test(function(){\n  /*unminified*/\n});\napp = new Ractive({\n  template: '#app',\n  el: 'container'\n});\nsetSwitchActors = function(){\n  $('.switch-actor').each(function(){\n    var elem, pinName, actor;\n    elem = $(this);\n    pinName = getRactiveVariable(elem, 'pin_name');\n    actor = SwitchActor(pinName);\n    elem.data('actor', actor);\n  });\n};\nsetSwitchButtons = function(){\n  $('.switch-button').each(function(){\n    var elem, actor;\n    elem = $(this);\n    actor = elem.data('actor');\n    elem.change(function(){\n      return actor.guiEvent(this.checked);\n    });\n    actor.addCallback(function(msg){\n      return elem.prop('checked', msg.val);\n    });\n  });\n};\nsetPushButtons = function(){\n  return $('.push-button').each(function(){\n    var elem, actor;\n    elem = $(this);\n    actor = elem.data('actor');\n    elem.on('mousedown', function(){\n      actor.guiEvent(true);\n      return elem.on('mouseleave', function(){\n        return actor.guiEvent(false);\n      });\n    });\n    elem.on('mouseup', function(){\n      actor.guiEvent(false);\n      return elem.off('mouseleave');\n    });\n    elem.on('touchstart', function(e){\n      actor.guiEvent(true);\n      elem.touchleave(function(){\n        return actor.guiEvent(false);\n      });\n      return e.stopPropagation();\n    });\n    elem.on('touchend', function(e){\n      return actor.guiEvent(false);\n    });\n    return actor.addCallback(function(msg){\n      if (msg.val) {\n        return elem.addClass('button-active-state');\n      } else {\n        return elem.removeClass('button-active-state');\n      }\n    });\n  });\n};\nsetStatusLeds = function(){\n  return $('.status-led').each(function(){\n    var elem, actor;\n    elem = $(this);\n    actor = elem.data('actor');\n    return actor.addCallback(function(msg){\n      return setRactiveVariable(elem, 'val', msg.val);\n    });\n  });\n};\nsetAnalogDisplays = function(){\n  return $('.analog-display').each(function(){\n    var elem, channelName, actor;\n    elem = $(this);\n    channelName = getRactiveVariable(elem, 'pin_name');\n    actor = SwitchActor(channelName);\n    return actor.addCallback(function(msg){\n      return setRactiveVariable(elem, 'val', msg.val);\n    });\n  });\n};\nmakeJqMobileConnections = function(){\n  $('document').ready(function(){\n    var setSliders;\n    $('.ui-checkbox').each(function(){\n      var elem, actor, jqButton;\n      elem = $(this);\n      actor = elem.children('.switch-actor').data('actor');\n      jqButton = elem.children('.ui-btn');\n      actor.addCallback(function(msg){\n        if (msg.val) {\n          jqButton.addClass('ui-checkbox-on');\n          jqButton.addClass('ui-btn-active');\n          return jqButton.removeClass('ui-checkbox-off');\n        } else {\n          jqButton.removeClass('ui-checkbox-on');\n          jqButton.removeClass('ui-btn-active');\n          return jqButton.addClass('ui-checkbox-off');\n        }\n      });\n    });\n    $('.ui-flipswitch').each(function(){\n      var elem, actor;\n      elem = $(this);\n      actor = elem.children('.switch-actor').data('actor');\n      return actor.addCallback(function(msg){\n        if (msg.val) {\n          return elem.addClass('ui-flipswitch-active');\n        } else {\n          return elem.removeClass('ui-flipswitch-active');\n        }\n      });\n    });\n    $('.push-button').each(function(){\n      var elem, actor;\n      elem = $(this);\n      actor = elem.data('actor');\n      actor.addCallback(function(msg){\n        if (msg.val) {\n          return elem.addClass('ui-btn-active');\n        } else {\n          return elem.removeClass('ui-btn-active');\n        }\n      });\n      elem.disableSelection();\n      elem.onselectstart = function(){\n        return false;\n      };\n      elem.unselectable = \"on\";\n      elem.css('-moz-user-select', 'none');\n      return elem.css('-webkit-user-select', 'none');\n    });\n    setSliders = function(){\n      $('.slider').each(function(){\n        var elem, actor;\n        elem = $(this).find('input');\n        actor = $(this).data('actor');\n        elem.on('change', function(){\n          return actor.guiEvent(elem.val());\n        });\n        actor.addCallback(function(msg){\n          return elem.val(msg.val).slider('refresh');\n        });\n      });\n    };\n    return setSliders();\n  });\n};\nmakeToggleSwitchVisualisation = function(){\n  return $('.toggle-switch').each(function(){\n    var elem, actor, s;\n    elem = $(this);\n    actor = elem.data('actor');\n    s = new ToggleSwitch(elem.get(0, 'on', 'off'));\n    actor.addCallback(function(msg){\n      var tmp;\n      tmp = s.fCallback;\n      s.fCallback = null;\n      if (msg.val) {\n        s.on();\n      } else {\n        s.off();\n      }\n      s.fCallback = tmp;\n      return tmp = null;\n    });\n    s.addListener(function(state){\n      actor.sendEvent(state);\n    });\n  });\n};\napp.on('complete', function(){\n  setSwitchActors();\n  setSwitchButtons();\n  setPushButtons();\n  setStatusLeds();\n  setAnalogDisplays();\n  makeJqMobileConnections();\n});\nsocket.on(\"connect\", function(){\n  app.set(\"connected\", true);\n});\nsocket.on('disconnect', function(){\n  console.log('disconnected...');\n  app.set('connected', false);\n});\nfunction extend$(sub, sup){\n  function fun(){} fun.prototype = (sub.superclass = sup).prototype;\n  (sub.prototype = new fun).constructor = sub;\n  if (typeof sup.extended == 'function') sup.extended(sub);\n  return sub;\n}\nfunction import$(obj, src){\n  var own = {}.hasOwnProperty;\n  for (var key in src) if (own.call(src, key)) obj[key] = src[key];\n  return obj;\n}\nfunction in$(x, xs){\n  var i = -1, l = xs.length >>> 0;\n  while (++i < l) if (x === xs[i]) return true;\n  return false;\n}","require('app');","var apply, curry, flip, fix, over, memoize, slice$ = [].slice, toString$ = {}.toString;\napply = curry$(function(f, list){\n  return f.apply(null, list);\n});\ncurry = function(f){\n  return curry$(f);\n};\nflip = curry$(function(f, x, y){\n  return f(y, x);\n});\nfix = function(f){\n  return function(g){\n    return function(){\n      return f(g(g)).apply(null, arguments);\n    };\n  }(function(g){\n    return function(){\n      return f(g(g)).apply(null, arguments);\n    };\n  });\n};\nover = curry$(function(f, g, x, y){\n  return f(g(x), g(y));\n});\nmemoize = function(f){\n  var memo;\n  memo = {};\n  return function(){\n    var args, key, arg;\n    args = slice$.call(arguments);\n    key = (function(){\n      var i$, ref$, len$, results$ = [];\n      for (i$ = 0, len$ = (ref$ = args).length; i$ < len$; ++i$) {\n        arg = ref$[i$];\n        results$.push(arg + toString$.call(arg).slice(8, -1));\n      }\n      return results$;\n    }()).join('');\n    return memo[key] = key in memo\n      ? memo[key]\n      : f.apply(null, args);\n  };\n};\nmodule.exports = {\n  curry: curry,\n  flip: flip,\n  fix: fix,\n  apply: apply,\n  over: over,\n  memoize: memoize\n};\nfunction curry$(f, bound){\n  var context,\n  _curry = function(args) {\n    return f.length > 1 ? function(){\n      var params = args ? args.concat() : [];\n      context = bound ? context || this : this;\n      return params.push.apply(params, arguments) <\n          f.length && arguments.length ?\n        _curry.call(context, params) : f.apply(context, params);\n    } : f;\n  };\n  return _curry();\n}","var each, map, compact, filter, reject, partition, find, head, first, tail, last, initial, empty, reverse, unique, uniqueBy, fold, foldl, fold1, foldl1, foldr, foldr1, unfoldr, concat, concatMap, flatten, difference, intersection, union, countBy, groupBy, andList, orList, any, all, sort, sortWith, sortBy, sum, product, mean, average, maximum, minimum, maximumBy, minimumBy, scan, scanl, scan1, scanl1, scanr, scanr1, slice, take, drop, splitAt, takeWhile, dropWhile, span, breakList, zip, zipWith, zipAll, zipAllWith, at, elemIndex, elemIndices, findIndex, findIndices, toString$ = {}.toString, slice$ = [].slice;\neach = curry$(function(f, xs){\n  var i$, len$, x;\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    x = xs[i$];\n    f(x);\n  }\n  return xs;\n});\nmap = curry$(function(f, xs){\n  var i$, len$, x, results$ = [];\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    x = xs[i$];\n    results$.push(f(x));\n  }\n  return results$;\n});\ncompact = function(xs){\n  var i$, len$, x, results$ = [];\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    x = xs[i$];\n    if (x) {\n      results$.push(x);\n    }\n  }\n  return results$;\n};\nfilter = curry$(function(f, xs){\n  var i$, len$, x, results$ = [];\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    x = xs[i$];\n    if (f(x)) {\n      results$.push(x);\n    }\n  }\n  return results$;\n});\nreject = curry$(function(f, xs){\n  var i$, len$, x, results$ = [];\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    x = xs[i$];\n    if (!f(x)) {\n      results$.push(x);\n    }\n  }\n  return results$;\n});\npartition = curry$(function(f, xs){\n  var passed, failed, i$, len$, x;\n  passed = [];\n  failed = [];\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    x = xs[i$];\n    (f(x) ? passed : failed).push(x);\n  }\n  return [passed, failed];\n});\nfind = curry$(function(f, xs){\n  var i$, len$, x;\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    x = xs[i$];\n    if (f(x)) {\n      return x;\n    }\n  }\n});\nhead = first = function(xs){\n  return xs[0];\n};\ntail = function(xs){\n  if (!xs.length) {\n    return;\n  }\n  return xs.slice(1);\n};\nlast = function(xs){\n  return xs[xs.length - 1];\n};\ninitial = function(xs){\n  if (!xs.length) {\n    return;\n  }\n  return xs.slice(0, -1);\n};\nempty = function(xs){\n  return !xs.length;\n};\nreverse = function(xs){\n  return xs.concat().reverse();\n};\nunique = function(xs){\n  var result, i$, len$, x;\n  result = [];\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    x = xs[i$];\n    if (!in$(x, result)) {\n      result.push(x);\n    }\n  }\n  return result;\n};\nuniqueBy = curry$(function(f, xs){\n  var seen, i$, len$, x, val, results$ = [];\n  seen = [];\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    x = xs[i$];\n    val = f(x);\n    if (in$(val, seen)) {\n      continue;\n    }\n    seen.push(val);\n    results$.push(x);\n  }\n  return results$;\n});\nfold = foldl = curry$(function(f, memo, xs){\n  var i$, len$, x;\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    x = xs[i$];\n    memo = f(memo, x);\n  }\n  return memo;\n});\nfold1 = foldl1 = curry$(function(f, xs){\n  return fold(f, xs[0], xs.slice(1));\n});\nfoldr = curry$(function(f, memo, xs){\n  var i$, x;\n  for (i$ = xs.length - 1; i$ >= 0; --i$) {\n    x = xs[i$];\n    memo = f(x, memo);\n  }\n  return memo;\n});\nfoldr1 = curry$(function(f, xs){\n  return foldr(f, xs[xs.length - 1], xs.slice(0, -1));\n});\nunfoldr = curry$(function(f, b){\n  var result, x, that;\n  result = [];\n  x = b;\n  while ((that = f(x)) != null) {\n    result.push(that[0]);\n    x = that[1];\n  }\n  return result;\n});\nconcat = function(xss){\n  return [].concat.apply([], xss);\n};\nconcatMap = curry$(function(f, xs){\n  var x;\n  return [].concat.apply([], (function(){\n    var i$, ref$, len$, results$ = [];\n    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {\n      x = ref$[i$];\n      results$.push(f(x));\n    }\n    return results$;\n  }()));\n});\nflatten = function(xs){\n  var x;\n  return [].concat.apply([], (function(){\n    var i$, ref$, len$, results$ = [];\n    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {\n      x = ref$[i$];\n      if (toString$.call(x).slice(8, -1) === 'Array') {\n        results$.push(flatten(x));\n      } else {\n        results$.push(x);\n      }\n    }\n    return results$;\n  }()));\n};\ndifference = function(xs){\n  var yss, results, i$, len$, x, j$, len1$, ys;\n  yss = slice$.call(arguments, 1);\n  results = [];\n  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    x = xs[i$];\n    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {\n      ys = yss[j$];\n      if (in$(x, ys)) {\n        continue outer;\n      }\n    }\n    results.push(x);\n  }\n  return results;\n};\nintersection = function(xs){\n  var yss, results, i$, len$, x, j$, len1$, ys;\n  yss = slice$.call(arguments, 1);\n  results = [];\n  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    x = xs[i$];\n    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {\n      ys = yss[j$];\n      if (!in$(x, ys)) {\n        continue outer;\n      }\n    }\n    results.push(x);\n  }\n  return results;\n};\nunion = function(){\n  var xss, results, i$, len$, xs, j$, len1$, x;\n  xss = slice$.call(arguments);\n  results = [];\n  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {\n    xs = xss[i$];\n    for (j$ = 0, len1$ = xs.length; j$ < len1$; ++j$) {\n      x = xs[j$];\n      if (!in$(x, results)) {\n        results.push(x);\n      }\n    }\n  }\n  return results;\n};\ncountBy = curry$(function(f, xs){\n  var results, i$, len$, x, key;\n  results = {};\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    x = xs[i$];\n    key = f(x);\n    if (key in results) {\n      results[key] += 1;\n    } else {\n      results[key] = 1;\n    }\n  }\n  return results;\n});\ngroupBy = curry$(function(f, xs){\n  var results, i$, len$, x, key;\n  results = {};\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    x = xs[i$];\n    key = f(x);\n    if (key in results) {\n      results[key].push(x);\n    } else {\n      results[key] = [x];\n    }\n  }\n  return results;\n});\nandList = function(xs){\n  var i$, len$, x;\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    x = xs[i$];\n    if (!x) {\n      return false;\n    }\n  }\n  return true;\n};\norList = function(xs){\n  var i$, len$, x;\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    x = xs[i$];\n    if (x) {\n      return true;\n    }\n  }\n  return false;\n};\nany = curry$(function(f, xs){\n  var i$, len$, x;\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    x = xs[i$];\n    if (f(x)) {\n      return true;\n    }\n  }\n  return false;\n});\nall = curry$(function(f, xs){\n  var i$, len$, x;\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    x = xs[i$];\n    if (!f(x)) {\n      return false;\n    }\n  }\n  return true;\n});\nsort = function(xs){\n  return xs.concat().sort(function(x, y){\n    if (x > y) {\n      return 1;\n    } else if (x < y) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n};\nsortWith = curry$(function(f, xs){\n  return xs.concat().sort(f);\n});\nsortBy = curry$(function(f, xs){\n  return xs.concat().sort(function(x, y){\n    if (f(x) > f(y)) {\n      return 1;\n    } else if (f(x) < f(y)) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n});\nsum = function(xs){\n  var result, i$, len$, x;\n  result = 0;\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    x = xs[i$];\n    result += x;\n  }\n  return result;\n};\nproduct = function(xs){\n  var result, i$, len$, x;\n  result = 1;\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    x = xs[i$];\n    result *= x;\n  }\n  return result;\n};\nmean = average = function(xs){\n  var sum, i$, len$, x;\n  sum = 0;\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    x = xs[i$];\n    sum += x;\n  }\n  return sum / xs.length;\n};\nmaximum = function(xs){\n  var max, i$, ref$, len$, x;\n  max = xs[0];\n  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {\n    x = ref$[i$];\n    if (x > max) {\n      max = x;\n    }\n  }\n  return max;\n};\nminimum = function(xs){\n  var min, i$, ref$, len$, x;\n  min = xs[0];\n  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {\n    x = ref$[i$];\n    if (x < min) {\n      min = x;\n    }\n  }\n  return min;\n};\nmaximumBy = curry$(function(f, xs){\n  var max, i$, ref$, len$, x;\n  max = xs[0];\n  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {\n    x = ref$[i$];\n    if (f(x) > f(max)) {\n      max = x;\n    }\n  }\n  return max;\n});\nminimumBy = curry$(function(f, xs){\n  var min, i$, ref$, len$, x;\n  min = xs[0];\n  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {\n    x = ref$[i$];\n    if (f(x) < f(min)) {\n      min = x;\n    }\n  }\n  return min;\n});\nscan = scanl = curry$(function(f, memo, xs){\n  var last, x;\n  last = memo;\n  return [memo].concat((function(){\n    var i$, ref$, len$, results$ = [];\n    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {\n      x = ref$[i$];\n      results$.push(last = f(last, x));\n    }\n    return results$;\n  }()));\n});\nscan1 = scanl1 = curry$(function(f, xs){\n  if (!xs.length) {\n    return;\n  }\n  return scan(f, xs[0], xs.slice(1));\n});\nscanr = curry$(function(f, memo, xs){\n  xs = xs.concat().reverse();\n  return scan(f, memo, xs).reverse();\n});\nscanr1 = curry$(function(f, xs){\n  if (!xs.length) {\n    return;\n  }\n  xs = xs.concat().reverse();\n  return scan(f, xs[0], xs.slice(1)).reverse();\n});\nslice = curry$(function(x, y, xs){\n  return xs.slice(x, y);\n});\ntake = curry$(function(n, xs){\n  if (n <= 0) {\n    return xs.slice(0, 0);\n  } else {\n    return xs.slice(0, n);\n  }\n});\ndrop = curry$(function(n, xs){\n  if (n <= 0) {\n    return xs;\n  } else {\n    return xs.slice(n);\n  }\n});\nsplitAt = curry$(function(n, xs){\n  return [take(n, xs), drop(n, xs)];\n});\ntakeWhile = curry$(function(p, xs){\n  var len, i;\n  len = xs.length;\n  if (!len) {\n    return xs;\n  }\n  i = 0;\n  while (i < len && p(xs[i])) {\n    i += 1;\n  }\n  return xs.slice(0, i);\n});\ndropWhile = curry$(function(p, xs){\n  var len, i;\n  len = xs.length;\n  if (!len) {\n    return xs;\n  }\n  i = 0;\n  while (i < len && p(xs[i])) {\n    i += 1;\n  }\n  return xs.slice(i);\n});\nspan = curry$(function(p, xs){\n  return [takeWhile(p, xs), dropWhile(p, xs)];\n});\nbreakList = curry$(function(p, xs){\n  return span(compose$(p, not$), xs);\n});\nzip = curry$(function(xs, ys){\n  var result, len, i$, len$, i, x;\n  result = [];\n  len = ys.length;\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    i = i$;\n    x = xs[i$];\n    if (i === len) {\n      break;\n    }\n    result.push([x, ys[i]]);\n  }\n  return result;\n});\nzipWith = curry$(function(f, xs, ys){\n  var result, len, i$, len$, i, x;\n  result = [];\n  len = ys.length;\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    i = i$;\n    x = xs[i$];\n    if (i === len) {\n      break;\n    }\n    result.push(f(x, ys[i]));\n  }\n  return result;\n});\nzipAll = function(){\n  var xss, minLength, i$, len$, xs, ref$, i, lresult$, j$, results$ = [];\n  xss = slice$.call(arguments);\n  minLength = undefined;\n  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {\n    xs = xss[i$];\n    minLength <= (ref$ = xs.length) || (minLength = ref$);\n  }\n  for (i$ = 0; i$ < minLength; ++i$) {\n    i = i$;\n    lresult$ = [];\n    for (j$ = 0, len$ = xss.length; j$ < len$; ++j$) {\n      xs = xss[j$];\n      lresult$.push(xs[i]);\n    }\n    results$.push(lresult$);\n  }\n  return results$;\n};\nzipAllWith = function(f){\n  var xss, minLength, i$, len$, xs, ref$, i, results$ = [];\n  xss = slice$.call(arguments, 1);\n  minLength = undefined;\n  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {\n    xs = xss[i$];\n    minLength <= (ref$ = xs.length) || (minLength = ref$);\n  }\n  for (i$ = 0; i$ < minLength; ++i$) {\n    i = i$;\n    results$.push(f.apply(null, (fn$())));\n  }\n  return results$;\n  function fn$(){\n    var i$, ref$, len$, results$ = [];\n    for (i$ = 0, len$ = (ref$ = xss).length; i$ < len$; ++i$) {\n      xs = ref$[i$];\n      results$.push(xs[i]);\n    }\n    return results$;\n  }\n};\nat = curry$(function(n, xs){\n  if (n < 0) {\n    return xs[xs.length + n];\n  } else {\n    return xs[n];\n  }\n});\nelemIndex = curry$(function(el, xs){\n  var i$, len$, i, x;\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    i = i$;\n    x = xs[i$];\n    if (x === el) {\n      return i;\n    }\n  }\n});\nelemIndices = curry$(function(el, xs){\n  var i$, len$, i, x, results$ = [];\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    i = i$;\n    x = xs[i$];\n    if (x === el) {\n      results$.push(i);\n    }\n  }\n  return results$;\n});\nfindIndex = curry$(function(f, xs){\n  var i$, len$, i, x;\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    i = i$;\n    x = xs[i$];\n    if (f(x)) {\n      return i;\n    }\n  }\n});\nfindIndices = curry$(function(f, xs){\n  var i$, len$, i, x, results$ = [];\n  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {\n    i = i$;\n    x = xs[i$];\n    if (f(x)) {\n      results$.push(i);\n    }\n  }\n  return results$;\n});\nmodule.exports = {\n  each: each,\n  map: map,\n  filter: filter,\n  compact: compact,\n  reject: reject,\n  partition: partition,\n  find: find,\n  head: head,\n  first: first,\n  tail: tail,\n  last: last,\n  initial: initial,\n  empty: empty,\n  reverse: reverse,\n  difference: difference,\n  intersection: intersection,\n  union: union,\n  countBy: countBy,\n  groupBy: groupBy,\n  fold: fold,\n  fold1: fold1,\n  foldl: foldl,\n  foldl1: foldl1,\n  foldr: foldr,\n  foldr1: foldr1,\n  unfoldr: unfoldr,\n  andList: andList,\n  orList: orList,\n  any: any,\n  all: all,\n  unique: unique,\n  uniqueBy: uniqueBy,\n  sort: sort,\n  sortWith: sortWith,\n  sortBy: sortBy,\n  sum: sum,\n  product: product,\n  mean: mean,\n  average: average,\n  concat: concat,\n  concatMap: concatMap,\n  flatten: flatten,\n  maximum: maximum,\n  minimum: minimum,\n  maximumBy: maximumBy,\n  minimumBy: minimumBy,\n  scan: scan,\n  scan1: scan1,\n  scanl: scanl,\n  scanl1: scanl1,\n  scanr: scanr,\n  scanr1: scanr1,\n  slice: slice,\n  take: take,\n  drop: drop,\n  splitAt: splitAt,\n  takeWhile: takeWhile,\n  dropWhile: dropWhile,\n  span: span,\n  breakList: breakList,\n  zip: zip,\n  zipWith: zipWith,\n  zipAll: zipAll,\n  zipAllWith: zipAllWith,\n  at: at,\n  elemIndex: elemIndex,\n  elemIndices: elemIndices,\n  findIndex: findIndex,\n  findIndices: findIndices\n};\nfunction curry$(f, bound){\n  var context,\n  _curry = function(args) {\n    return f.length > 1 ? function(){\n      var params = args ? args.concat() : [];\n      context = bound ? context || this : this;\n      return params.push.apply(params, arguments) <\n          f.length && arguments.length ?\n        _curry.call(context, params) : f.apply(context, params);\n    } : f;\n  };\n  return _curry();\n}\nfunction in$(x, xs){\n  var i = -1, l = xs.length >>> 0;\n  while (++i < l) if (x === xs[i]) return true;\n  return false;\n}\nfunction compose$() {\n  var functions = arguments;\n  return function() {\n    var i, result;\n    result = functions[0].apply(this, arguments);\n    for (i = 1; i < functions.length; ++i) {\n      result = functions[i](result);\n    }\n    return result;\n  };\n}\nfunction not$(x){ return !x; }","var max, min, negate, abs, signum, quot, rem, div, mod, recip, pi, tau, exp, sqrt, ln, pow, sin, tan, cos, asin, acos, atan, atan2, truncate, round, ceiling, floor, isItNaN, even, odd, gcd, lcm;\nmax = curry$(function(x$, y$){\n  return x$ > y$ ? x$ : y$;\n});\nmin = curry$(function(x$, y$){\n  return x$ < y$ ? x$ : y$;\n});\nnegate = function(x){\n  return -x;\n};\nabs = Math.abs;\nsignum = function(x){\n  if (x < 0) {\n    return -1;\n  } else if (x > 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n};\nquot = curry$(function(x, y){\n  return ~~(x / y);\n});\nrem = curry$(function(x$, y$){\n  return x$ % y$;\n});\ndiv = curry$(function(x, y){\n  return Math.floor(x / y);\n});\nmod = curry$(function(x$, y$){\n  var ref$;\n  return (((x$) % (ref$ = y$) + ref$) % ref$);\n});\nrecip = (function(it){\n  return 1 / it;\n});\npi = Math.PI;\ntau = pi * 2;\nexp = Math.exp;\nsqrt = Math.sqrt;\nln = Math.log;\npow = curry$(function(x$, y$){\n  return Math.pow(x$, y$);\n});\nsin = Math.sin;\ntan = Math.tan;\ncos = Math.cos;\nasin = Math.asin;\nacos = Math.acos;\natan = Math.atan;\natan2 = curry$(function(x, y){\n  return Math.atan2(x, y);\n});\ntruncate = function(x){\n  return ~~x;\n};\nround = Math.round;\nceiling = Math.ceil;\nfloor = Math.floor;\nisItNaN = function(x){\n  return x !== x;\n};\neven = function(x){\n  return x % 2 === 0;\n};\nodd = function(x){\n  return x % 2 !== 0;\n};\ngcd = curry$(function(x, y){\n  var z;\n  x = Math.abs(x);\n  y = Math.abs(y);\n  while (y !== 0) {\n    z = x % y;\n    x = y;\n    y = z;\n  }\n  return x;\n});\nlcm = curry$(function(x, y){\n  return Math.abs(Math.floor(x / gcd(x, y) * y));\n});\nmodule.exports = {\n  max: max,\n  min: min,\n  negate: negate,\n  abs: abs,\n  signum: signum,\n  quot: quot,\n  rem: rem,\n  div: div,\n  mod: mod,\n  recip: recip,\n  pi: pi,\n  tau: tau,\n  exp: exp,\n  sqrt: sqrt,\n  ln: ln,\n  pow: pow,\n  sin: sin,\n  tan: tan,\n  cos: cos,\n  acos: acos,\n  asin: asin,\n  atan: atan,\n  atan2: atan2,\n  truncate: truncate,\n  round: round,\n  ceiling: ceiling,\n  floor: floor,\n  isItNaN: isItNaN,\n  even: even,\n  odd: odd,\n  gcd: gcd,\n  lcm: lcm\n};\nfunction curry$(f, bound){\n  var context,\n  _curry = function(args) {\n    return f.length > 1 ? function(){\n      var params = args ? args.concat() : [];\n      context = bound ? context || this : this;\n      return params.push.apply(params, arguments) <\n          f.length && arguments.length ?\n        _curry.call(context, params) : f.apply(context, params);\n    } : f;\n  };\n  return _curry();\n}","var values, keys, pairsToObj, objToPairs, listsToObj, objToLists, empty, each, map, compact, filter, reject, partition, find;\nvalues = function(object){\n  var i$, x, results$ = [];\n  for (i$ in object) {\n    x = object[i$];\n    results$.push(x);\n  }\n  return results$;\n};\nkeys = function(object){\n  var x, results$ = [];\n  for (x in object) {\n    results$.push(x);\n  }\n  return results$;\n};\npairsToObj = function(object){\n  var i$, len$, x, resultObj$ = {};\n  for (i$ = 0, len$ = object.length; i$ < len$; ++i$) {\n    x = object[i$];\n    resultObj$[x[0]] = x[1];\n  }\n  return resultObj$;\n};\nobjToPairs = function(object){\n  var key, value, results$ = [];\n  for (key in object) {\n    value = object[key];\n    results$.push([key, value]);\n  }\n  return results$;\n};\nlistsToObj = curry$(function(keys, values){\n  var i$, len$, i, key, resultObj$ = {};\n  for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {\n    i = i$;\n    key = keys[i$];\n    resultObj$[key] = values[i];\n  }\n  return resultObj$;\n});\nobjToLists = function(object){\n  var keys, values, key, value;\n  keys = [];\n  values = [];\n  for (key in object) {\n    value = object[key];\n    keys.push(key);\n    values.push(value);\n  }\n  return [keys, values];\n};\nempty = function(object){\n  var x;\n  for (x in object) {\n    return false;\n  }\n  return true;\n};\neach = curry$(function(f, object){\n  var i$, x;\n  for (i$ in object) {\n    x = object[i$];\n    f(x);\n  }\n  return object;\n});\nmap = curry$(function(f, object){\n  var k, x, resultObj$ = {};\n  for (k in object) {\n    x = object[k];\n    resultObj$[k] = f(x);\n  }\n  return resultObj$;\n});\ncompact = function(object){\n  var k, x, resultObj$ = {};\n  for (k in object) {\n    x = object[k];\n    if (x) {\n      resultObj$[k] = x;\n    }\n  }\n  return resultObj$;\n};\nfilter = curry$(function(f, object){\n  var k, x, resultObj$ = {};\n  for (k in object) {\n    x = object[k];\n    if (f(x)) {\n      resultObj$[k] = x;\n    }\n  }\n  return resultObj$;\n});\nreject = curry$(function(f, object){\n  var k, x, resultObj$ = {};\n  for (k in object) {\n    x = object[k];\n    if (!f(x)) {\n      resultObj$[k] = x;\n    }\n  }\n  return resultObj$;\n});\npartition = curry$(function(f, object){\n  var passed, failed, k, x;\n  passed = {};\n  failed = {};\n  for (k in object) {\n    x = object[k];\n    (f(x) ? passed : failed)[k] = x;\n  }\n  return [passed, failed];\n});\nfind = curry$(function(f, object){\n  var i$, x;\n  for (i$ in object) {\n    x = object[i$];\n    if (f(x)) {\n      return x;\n    }\n  }\n});\nmodule.exports = {\n  values: values,\n  keys: keys,\n  pairsToObj: pairsToObj,\n  objToPairs: objToPairs,\n  listsToObj: listsToObj,\n  objToLists: objToLists,\n  empty: empty,\n  each: each,\n  map: map,\n  filter: filter,\n  compact: compact,\n  reject: reject,\n  partition: partition,\n  find: find\n};\nfunction curry$(f, bound){\n  var context,\n  _curry = function(args) {\n    return f.length > 1 ? function(){\n      var params = args ? args.concat() : [];\n      context = bound ? context || this : this;\n      return params.push.apply(params, arguments) <\n          f.length && arguments.length ?\n        _curry.call(context, params) : f.apply(context, params);\n    } : f;\n  };\n  return _curry();\n}","var split, join, lines, unlines, words, unwords, chars, unchars, reverse, repeat, capitalize, camelize, dasherize;\nsplit = curry$(function(sep, str){\n  return str.split(sep);\n});\njoin = curry$(function(sep, xs){\n  return xs.join(sep);\n});\nlines = function(str){\n  if (!str.length) {\n    return [];\n  }\n  return str.split('\\n');\n};\nunlines = function(it){\n  return it.join('\\n');\n};\nwords = function(str){\n  if (!str.length) {\n    return [];\n  }\n  return str.split(/[ ]+/);\n};\nunwords = function(it){\n  return it.join(' ');\n};\nchars = function(it){\n  return it.split('');\n};\nunchars = function(it){\n  return it.join('');\n};\nreverse = function(str){\n  return str.split('').reverse().join('');\n};\nrepeat = curry$(function(n, str){\n  var result, i$;\n  result = '';\n  for (i$ = 0; i$ < n; ++i$) {\n    result += str;\n  }\n  return result;\n});\ncapitalize = function(str){\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\ncamelize = function(it){\n  return it.replace(/[-_]+(.)?/g, function(arg$, c){\n    return (c != null ? c : '').toUpperCase();\n  });\n};\ndasherize = function(str){\n  return str.replace(/([^-A-Z])([A-Z]+)/g, function(arg$, lower, upper){\n    return lower + \"-\" + (upper.length > 1\n      ? upper\n      : upper.toLowerCase());\n  }).replace(/^([A-Z]+)/, function(arg$, upper){\n    if (upper.length > 1) {\n      return upper + \"-\";\n    } else {\n      return upper.toLowerCase();\n    }\n  });\n};\nmodule.exports = {\n  split: split,\n  join: join,\n  lines: lines,\n  unlines: unlines,\n  words: words,\n  unwords: unwords,\n  chars: chars,\n  unchars: unchars,\n  reverse: reverse,\n  repeat: repeat,\n  capitalize: capitalize,\n  camelize: camelize,\n  dasherize: dasherize\n};\nfunction curry$(f, bound){\n  var context,\n  _curry = function(args) {\n    return f.length > 1 ? function(){\n      var params = args ? args.concat() : [];\n      context = bound ? context || this : this;\n      return params.push.apply(params, arguments) <\n          f.length && arguments.length ?\n        _curry.call(context, params) : f.apply(context, params);\n    } : f;\n  };\n  return _curry();\n}","var Func, List, Obj, Str, Num, id, isType, replicate, prelude, toString$ = {}.toString;\nFunc = require('./Func');\nList = require('./List');\nObj = require('./Obj');\nStr = require('./Str');\nNum = require('./Num');\nid = function(x){\n  return x;\n};\nisType = curry$(function(type, x){\n  return toString$.call(x).slice(8, -1) === type;\n});\nreplicate = curry$(function(n, x){\n  var i$, results$ = [];\n  for (i$ = 0; i$ < n; ++i$) {\n    results$.push(x);\n  }\n  return results$;\n});\nStr.empty = List.empty;\nStr.slice = List.slice;\nStr.take = List.take;\nStr.drop = List.drop;\nStr.splitAt = List.splitAt;\nStr.takeWhile = List.takeWhile;\nStr.dropWhile = List.dropWhile;\nStr.span = List.span;\nStr.breakStr = List.breakList;\nprelude = {\n  Func: Func,\n  List: List,\n  Obj: Obj,\n  Str: Str,\n  Num: Num,\n  id: id,\n  isType: isType,\n  replicate: replicate\n};\nprelude.each = List.each;\nprelude.map = List.map;\nprelude.filter = List.filter;\nprelude.compact = List.compact;\nprelude.reject = List.reject;\nprelude.partition = List.partition;\nprelude.find = List.find;\nprelude.head = List.head;\nprelude.first = List.first;\nprelude.tail = List.tail;\nprelude.last = List.last;\nprelude.initial = List.initial;\nprelude.empty = List.empty;\nprelude.reverse = List.reverse;\nprelude.difference = List.difference;\nprelude.intersection = List.intersection;\nprelude.union = List.union;\nprelude.countBy = List.countBy;\nprelude.groupBy = List.groupBy;\nprelude.fold = List.fold;\nprelude.foldl = List.foldl;\nprelude.fold1 = List.fold1;\nprelude.foldl1 = List.foldl1;\nprelude.foldr = List.foldr;\nprelude.foldr1 = List.foldr1;\nprelude.unfoldr = List.unfoldr;\nprelude.andList = List.andList;\nprelude.orList = List.orList;\nprelude.any = List.any;\nprelude.all = List.all;\nprelude.unique = List.unique;\nprelude.uniqueBy = List.uniqueBy;\nprelude.sort = List.sort;\nprelude.sortWith = List.sortWith;\nprelude.sortBy = List.sortBy;\nprelude.sum = List.sum;\nprelude.product = List.product;\nprelude.mean = List.mean;\nprelude.average = List.average;\nprelude.concat = List.concat;\nprelude.concatMap = List.concatMap;\nprelude.flatten = List.flatten;\nprelude.maximum = List.maximum;\nprelude.minimum = List.minimum;\nprelude.maximumBy = List.maximumBy;\nprelude.minimumBy = List.minimumBy;\nprelude.scan = List.scan;\nprelude.scanl = List.scanl;\nprelude.scan1 = List.scan1;\nprelude.scanl1 = List.scanl1;\nprelude.scanr = List.scanr;\nprelude.scanr1 = List.scanr1;\nprelude.slice = List.slice;\nprelude.take = List.take;\nprelude.drop = List.drop;\nprelude.splitAt = List.splitAt;\nprelude.takeWhile = List.takeWhile;\nprelude.dropWhile = List.dropWhile;\nprelude.span = List.span;\nprelude.breakList = List.breakList;\nprelude.zip = List.zip;\nprelude.zipWith = List.zipWith;\nprelude.zipAll = List.zipAll;\nprelude.zipAllWith = List.zipAllWith;\nprelude.at = List.at;\nprelude.elemIndex = List.elemIndex;\nprelude.elemIndices = List.elemIndices;\nprelude.findIndex = List.findIndex;\nprelude.findIndices = List.findIndices;\nprelude.apply = Func.apply;\nprelude.curry = Func.curry;\nprelude.flip = Func.flip;\nprelude.fix = Func.fix;\nprelude.over = Func.over;\nprelude.split = Str.split;\nprelude.join = Str.join;\nprelude.lines = Str.lines;\nprelude.unlines = Str.unlines;\nprelude.words = Str.words;\nprelude.unwords = Str.unwords;\nprelude.chars = Str.chars;\nprelude.unchars = Str.unchars;\nprelude.repeat = Str.repeat;\nprelude.capitalize = Str.capitalize;\nprelude.camelize = Str.camelize;\nprelude.dasherize = Str.dasherize;\nprelude.values = Obj.values;\nprelude.keys = Obj.keys;\nprelude.pairsToObj = Obj.pairsToObj;\nprelude.objToPairs = Obj.objToPairs;\nprelude.listsToObj = Obj.listsToObj;\nprelude.objToLists = Obj.objToLists;\nprelude.max = Num.max;\nprelude.min = Num.min;\nprelude.negate = Num.negate;\nprelude.abs = Num.abs;\nprelude.signum = Num.signum;\nprelude.quot = Num.quot;\nprelude.rem = Num.rem;\nprelude.div = Num.div;\nprelude.mod = Num.mod;\nprelude.recip = Num.recip;\nprelude.pi = Num.pi;\nprelude.tau = Num.tau;\nprelude.exp = Num.exp;\nprelude.sqrt = Num.sqrt;\nprelude.ln = Num.ln;\nprelude.pow = Num.pow;\nprelude.sin = Num.sin;\nprelude.tan = Num.tan;\nprelude.cos = Num.cos;\nprelude.acos = Num.acos;\nprelude.asin = Num.asin;\nprelude.atan = Num.atan;\nprelude.atan2 = Num.atan2;\nprelude.truncate = Num.truncate;\nprelude.round = Num.round;\nprelude.ceiling = Num.ceiling;\nprelude.floor = Num.floor;\nprelude.isItNaN = Num.isItNaN;\nprelude.even = Num.even;\nprelude.odd = Num.odd;\nprelude.gcd = Num.gcd;\nprelude.lcm = Num.lcm;\nprelude.VERSION = '1.1.2';\nmodule.exports = prelude;\nfunction curry$(f, bound){\n  var context,\n  _curry = function(args) {\n    return f.length > 1 ? function(){\n      var params = args ? args.concat() : [];\n      context = bound ? context || this : this;\n      return params.push.apply(params, arguments) <\n          f.length && arguments.length ?\n        _curry.call(context, params) : f.apply(context, params);\n    } : f;\n  };\n  return _curry();\n}"]}