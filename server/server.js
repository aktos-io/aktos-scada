// Generated by LiveScript 1.4.0
(function(){
  var ref$, map, filter, tail, Hapi, zmq, server, SocketIO, io, subSock, pubSock, serverId, messageHistory, aktosDcsFilter;
  ref$ = require('prelude-ls'), map = ref$.map, filter = ref$.filter, tail = ref$.tail;
  Hapi = require("hapi");
  zmq = require('zmq');
  server = new Hapi.Server();
  server.connection({
    port: 4000
  });
  SocketIO = require('socket.io');
  io = SocketIO.listen(server.listener);
  subSock = zmq.socket('sub');
  pubSock = zmq.socket('pub');
  pubSock.connect('tcp://127.0.0.1:5012');
  subSock.connect('tcp://127.0.0.1:5013');
  pubSock['lingerPeriod'] = 0;
  pubSock['highWaterMark'] = 2;
  subSock.subscribe('');
  process.on('SIGINT', function(){
    subSock.close();
    pubSock.close();
    subSock.term();
    pubSock.term();
    console.log('Received SIGINT, zmq sockets are closed...');
    return process.exit(0);
  });
  serverId = "server-ls--give-a-unique-id-here!";
  messageHistory = [];
  aktosDcsFilter = function(msg){
    var i, now, timeout, treshold;
    if (in$(serverId, msg.sender)) {
      return null;
    }
    if (msg.cls === 'ProxyActorMessage') {
      return null;
    }
    if (in$(msg.msg_id, (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = messageHistory).length; i$ < len$; ++i$) {
        i = ref$[i$];
        results$.push(i[0]);
      }
      return results$;
    }()))) {
      return null;
    }
    now = Date.now() / 1000 || 0;
    timeout = 10;
    treshold = now - timeout;
    messageHistory = messageHistory.concat([[msg.msg_id, msg.timestamp]]);
    if (messageHistory[0]) {
      if (messageHistory[0][1] < treshold) {
        messageHistory = tail(messageHistory);
      }
    }
    return msg;
  };
  io.on('connection', function(socket){
    console.log("new client connected, starting its forwarder...");
    socket.on("aktos-message", function(msg){
      msg.sender = msg.sender.concat([serverId]);
      io.sockets.emit('aktos-message', msg);
      pubSock.send(JSON.stringify(msg));
    });
    socket.on('event', function(data){});
    socket.on('disconnect', function(){});
  });
  subSock.on('message', function(message){
    var msg;
    message = message.toString();
    msg = JSON.parse(message);
    msg = aktosDcsFilter(msg);
    if (msg) {
      msg.sender = msg.sender.concat([serverId]);
      io.sockets.emit('aktos-message', msg);
    }
  });
  server.route({
    method: 'GET',
    path: '/',
    handler: {
      file: './public/index.html'
    }
  });
  server.route({
    method: 'GET',
    path: '/{filename*}',
    handler: {
      file: function(request){
        return './public/' + request.params.filename;
      }
    }
  });
  server.route({
    method: 'GET',
    path: '/static/{filename*}',
    handler: {
      file: function(request){
        return './public/' + request.params.filename;
      }
    }
  });
  server.start(function(){
    console.log("Server running at:", server.info.uri);
  });
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
